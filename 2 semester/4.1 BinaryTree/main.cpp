#include <iostream>
#include "queue.hpp"
#include "stack.hpp"
#include "BinarySearchTree.hpp"

int main()
{
  std::cout << "\n --TEST QUEUE--";
  QueueArray<int> queue(3);
  queue.enQueue(5);
  queue.enQueue(7);
  queue.enQueue(9);
  std::cout << "\n " << queue.deQueue() << " " << queue.deQueue() << " " << queue.deQueue() << "\n";
  queue.enQueue(3);
  queue.enQueue(8);
  queue.enQueue(5);
  queue.deQueue();
  queue.enQueue(10);
  std::cout << "\n " << queue.deQueue() << " " << queue.deQueue() << " " << queue.deQueue() << "\n";
  std::cout << "\n --TEST QUEUE--";

  BinarySearchTree<int> test;
  test.insert(10);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(3);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(2);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(4);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(11);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(15);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(13);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(11);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(17);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(16);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.insert(18);
  std::cout << "\n";
  test.iterativeInorderWalk();
  std::cout << "\n";
  test.inorderWalk();
  std::cout << "\n";
  test.print();
  std::cout << "\n";
  test.iterativeInorderWalkQueue();
  std::cout << "\n";
  test.iterativeInorderWalkStack();
  std::cout << "\n" << test.getHeight() << " " << test.getCount();

  BinarySearchTree<int> tester;
  tester.insert(10);
  tester.insert(3);
  tester.insert(11);
  tester.insert(15);
  tester.insert(13);
  tester.insert(17);
  tester.insert(16);
  tester.insert(18);
  tester.insert(2);
  tester.insert(4);
  std::cout << "\nTwo trees are equal - " << (test == tester) << "\n";
  test.deleteItem(15);
  test.iterativeInorderWalk();
  std::cout << "\n";
  test.inorderWalk();
  std::cout << "\n";
  test.print();
  std::cout << "\n";
  test.iterativeInorderWalkQueue();
  std::cout << "\n";
  test.iterativeInorderWalkStack();
  std::cout << "\n\n";
  test.swap(tester);
  test.iterativeInorderWalk();
  test.insert(1);
  test.insert(5);
  test.insert(14);
  std::cout << "\n";
  test.iterativeInorderWalk();

  std::cout << "\n --TEST DELETE--";
  test.deleteItem(2);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.deleteItem(4);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.deleteItem(13);
  std::cout << "\n";
  test.iterativeInorderWalk();
  std::cout << "\n --TEST DELETE--";

  std::cout << "\n --TEST DELETE--";
  test.deleteItem(3);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.deleteItem(15);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.deleteItem(10);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.deleteItem(14);
  std::cout << "\n";
  test.iterativeInorderWalk();
  test.deleteItem(17);
  std::cout << "\n";
  test.iterativeInorderWalk();
  std::cout << "\n --TEST DELETE--";

  std::cout << "\n --TEST ROOT DELETE--";
  std::cout << "\n";
  test.inorderWalk();
  std::cout << "\n";
  test.print();
  std::cout << "\n";
  test.iterativeInorderWalkQueue();
  std::cout << "\n";
  test.iterativeInorderWalkStack();
  test.deleteItem(11);
  std::cout << "\n";
  test.iterativeInorderWalk();
  std::cout << "\n";
  test.inorderWalk();
  std::cout << "\n";
  test.print();
  std::cout << "\n";
  test.iterativeInorderWalkQueue();
  std::cout << "\n";
  test.iterativeInorderWalkStack();
  std::cout << "\n --TEST ROOT DELETE--";
  std::cout << "\nTwo trees are equal - " << (test == tester) << "\n";
  return 0;
}
